#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

using namespace std;
using namespace cv;

#define WINDOW_NAME1 "【原始窗口】"
#define WINDOW_NAME2 "【轮廓图】"

Mat g_srcImage;
Mat g_grayImage;
int g_nThresh = 80;  // 轨迹条值
int g_nThresh_max = 255;  // 轨迹条最大值
RNG g_rng(12345);
Mat g_cannyMat_output; 
vector<vector<Point>> g_vContours;  // 轮廓组
vector<Vec4i> g_vHierarchy;  // 层次结构

void on_ThreshChange(int, void*);  // 回调函数

int main(int argc, char** argv)
{
	system("color 1F");

	g_srcImage = imread("C:/Users/lenvo/Desktop/background/5.jpg", 100);
	if (!g_srcImage.data)
	{
		printf("读取图片错误！");
		return false;
	}

	// 转成灰度并模糊化降噪
	cvtColor(g_srcImage, g_grayImage, COLOR_BGR2GRAY);
	blur(g_grayImage, g_grayImage, Size(3, 3));

	// 创建窗口
	namedWindow(WINDOW_NAME1, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME1, g_srcImage);

	// 创建滚动条并初始化
	createTrackbar("canny阈值", WINDOW_NAME1, &g_nThresh, g_nThresh_max, on_ThreshChange);
	on_ThreshChange(0, 0);

	waitKey(0);
	return 0;
}

void on_ThreshChange(int, void*)
{
	// 用Canny算子检测边缘
	Canny(g_grayImage, g_cannyMat_output, g_nThresh, g_nThresh * 2, 3);

	// 寻找轮廓
	findContours(g_cannyMat_output,
		g_vContours,  // 轮廓组
		g_vHierarchy,  // 层次结构
		RETR_TREE,  // 提取所有轮廓，并重新建立网状的轮廓结构
		CHAIN_APPROX_SIMPLE,  // 压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标
		Point(0, 0)  // 默认值
	);

	// 绘出轮廓
	Mat drawing = Mat::zeros(g_cannyMat_output.size(), CV_8UC3);
	for (int i = 0; i < g_vContours.size(); i++)
	{
		Scalar color = Scalar(g_rng.uniform(0, 255),
			g_rng.uniform(0, 255),
			g_rng.uniform(0, 255)
		);
		drawContours(drawing, 
			g_vContours,
			i,  // 若i为负值，则绘制所有轮廓
			color,
			2,  // 若轮廓线条粗细度为负，便绘制在轮廓内部
			8, 
			g_vHierarchy,  // 可选的层次结构信息 
			0, 
			Point()  // 可选的轮廓便宜参数
		);
	}

	imshow(WINDOW_NAME2, drawing);
}