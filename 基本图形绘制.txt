#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace cv;

#define WINDOW_NAME1 "【绘制图1】"  // 为窗口标题定义的宏
#define WINDOW_NAME2 "【绘制图2】"  
#define WINDOW_WIDTH 600  // 定义窗口大小的宏

void DrawEllipse(Mat img, double angle)  // 绘制椭圆
{
	int thickness = 2;
	int lineType = 8;

	ellipse(img,
		Point(WINDOW_WIDTH / 2, WINDOW_WIDTH / 2),  // 椭圆中心点
		Size(WINDOW_WIDTH / 4, WINDOW_WIDTH / 16),  // 大小位于矩形内
		angle,  // 旋转角度
		0,  // 扩展到的弧度为0到360度
		360,
		Scalar(255, 129, 0),  // 颜色
		thickness,  // 线宽
		lineType);  // 线型
}

void DrawFilledCircle(Mat img, Point center)  // 绘制实心圆
{
	int thickness = -1;
	int lineType = 8;

	circle(img,
		center,  // 圆心
		WINDOW_WIDTH / 32,  // 半径
		Scalar(0, 0, 255),
		thickness,
		lineType);
}

void DrawPolygon(Mat img)  //绘制多边形 
{
	int lineType = 8;
	Point rookPoints[1][20];
	rookPoints[0][0] = Point(WINDOW_WIDTH / 4, 7 * WINDOW_WIDTH / 8);
	rookPoints[0][1] = Point(3 * WINDOW_WIDTH / 4, 7 * WINDOW_WIDTH / 8);
	rookPoints[0][2] = Point(3 * WINDOW_WIDTH / 4, 13 * WINDOW_WIDTH / 16);
	rookPoints[0][3] = Point(11 * WINDOW_WIDTH / 16, 13 * WINDOW_WIDTH / 16);
	rookPoints[0][4] = Point(19 * WINDOW_WIDTH / 32, 3 * WINDOW_WIDTH / 8);
	rookPoints[0][5] = Point(3 * WINDOW_WIDTH / 4, 3 * WINDOW_WIDTH / 8);
	rookPoints[0][6] = Point(3 * WINDOW_WIDTH / 4, WINDOW_WIDTH / 8);
	rookPoints[0][7] = Point(26 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 8);
	rookPoints[0][8] = Point(26 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 4);
	rookPoints[0][9] = Point(22 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 4);
	rookPoints[0][10] = Point(22 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 8);
	rookPoints[0][11] = Point(18 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 8);
	rookPoints[0][12] = Point(18 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 4);
	rookPoints[0][13] = Point(14 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 4);
	rookPoints[0][14] = Point(14 * WINDOW_WIDTH / 40, WINDOW_WIDTH / 8);
	rookPoints[0][15] = Point(WINDOW_WIDTH / 4, WINDOW_WIDTH / 8);
	rookPoints[0][16] = Point(WINDOW_WIDTH / 4, 3 * WINDOW_WIDTH / 8);
	rookPoints[0][17] = Point(13 * WINDOW_WIDTH / 32, 3 * WINDOW_WIDTH / 8);
	rookPoints[0][18] = Point(5 * WINDOW_WIDTH / 16, 13 * WINDOW_WIDTH / 16);
	rookPoints[0][19] = Point(WINDOW_WIDTH / 4, 13 * WINDOW_WIDTH / 16);

	const Point* ppt[1] = { rookPoints[0] };
	int npt[] = { 20 };
	
	fillPoly(img,
		ppt,  // 顶点集
		npt,  // 顶点数
		1,  // 多边形个数
		Scalar(255, 255, 255),
		lineType);
}

void DrawLine(Mat img, Point start, Point end)  // 绘制线段
{
	int thickness = 2;
	int lineType = 8;

	line(img,
		start,  // 起始坐标
		end,  // 终点坐标
		Scalar(0, 0, 0),
		thickness,
		lineType);
}

void DrawRectangle(Mat img)  // 绘制矩形
{
	int thickness = -1;
	int lineType = 8;

	rectangle(img,
		Point(0, 7 * WINDOW_WIDTH / 8),
		Point(WINDOW_WIDTH, WINDOW_WIDTH),
		Scalar(0, 255, 255),
		thickness,
		lineType);
}

int main()
{
	// 创建空白的Mat图像
	Mat atomImage = Mat::zeros(WINDOW_WIDTH, WINDOW_WIDTH, CV_8UC3);
	Mat rookImage = Mat::zeros(WINDOW_WIDTH, WINDOW_WIDTH, CV_8UC3);
	
	// ------------------------------------绘制化学中的原子示例图----------------------------------------

	// 1.1现绘制出椭圆
	DrawEllipse(atomImage, 90);
	DrawEllipse(atomImage, 0);
	DrawEllipse(atomImage, 45);
	DrawEllipse(atomImage, -45);

	// 1.2再绘制圆心
	DrawFilledCircle(atomImage, Point(WINDOW_WIDTH / 2, WINDOW_WIDTH / 2));

	//-----------------------------------------------绘制组合图------------------------------------------------

	// 2.1先绘制出多边形
	DrawPolygon(rookImage);

	// 2.2绘制矩形
	DrawRectangle(rookImage);

	// 2.3绘制一些线段
	DrawLine(rookImage, Point(0, 15 * WINDOW_WIDTH / 16),
		Point(WINDOW_WIDTH, 15 * WINDOW_WIDTH / 16));
	DrawLine(rookImage, Point(WINDOW_WIDTH / 4, 7 * WINDOW_WIDTH / 8),
		Point(WINDOW_WIDTH / 4, WINDOW_WIDTH));
	DrawLine(rookImage, Point(WINDOW_WIDTH / 2, 7 * WINDOW_WIDTH / 8),
		Point(WINDOW_WIDTH / 2, WINDOW_WIDTH));
	DrawLine(rookImage, Point(3 * WINDOW_WIDTH / 4, 7 * WINDOW_WIDTH / 8),
		Point(3 * WINDOW_WIDTH / 4, WINDOW_WIDTH));

	//------------------------------------------------显示绘制出的图像-------------------------------------
	imshow(WINDOW_NAME1, atomImage);
	moveWindow(WINDOW_NAME1, 0, 200);
	imshow(WINDOW_NAME2, rookImage);
	moveWindow(WINDOW_NAME2, WINDOW_WIDTH, 200);

	waitKey(0);
	return 0;
}