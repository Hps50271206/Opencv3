#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

using namespace std;
using namespace cv;

Mat g_srcImage, g_dstImage;  // 原始图和效果图
int g_nElementShape = MORPH_ELLIPSE;  // 内核的形状

// 变量接收的TrackBar位置参数
int g_nMaxIterationNum = 10;
int g_nOpenCloseNum = 0;
int g_nErodeDilateNum = 0;
int g_nTopBlackNum = 0;

static void on_OpenClose(int, void*);
static void on_ErodeDilate(int, void*);
static void on_TopBlackHat(int, void*);
static void ShowHelpText();

int main()
{
	system("color 5E");

	g_srcImage = imread("C:/Users/lenvo/Desktop/background/6.jpg", 199);
	if (!g_srcImage.data)
	{
		printf("读取srcImage错误！");
		return false;
	}

	// 显示原始图
	namedWindow("【原始图】");
	imshow("【原始图】", g_srcImage);

	// 创建三个窗口
	namedWindow("【开运算/闭运算】");
	namedWindow("【腐蚀/膨胀】");
	namedWindow("【顶帽/黑帽】");

	// 参数赋值
	g_nOpenCloseNum = 9;
	g_nErodeDilateNum = 9;
	g_nTopBlackNum = 2;

	// 分别为三个窗口创建滚动条
	createTrackbar("迭代值", "【开运算/闭运算】", &g_nOpenCloseNum, g_nMaxIterationNum * 2 + 1, on_OpenClose);
	createTrackbar("迭代值", "【腐蚀/膨胀】", &g_nErodeDilateNum, g_nMaxIterationNum * 2 + 1, on_ErodeDilate);
	createTrackbar("迭代值", "【顶帽/黑帽】", &g_nTopBlackNum, g_nMaxIterationNum * 2 + 1, on_TopBlackHat);

	// 轮询获取按键信息
	while (1)
	{
		int c;

		// 执行回调函数
		on_OpenClose(g_nOpenCloseNum, 0);
		on_ErodeDilate(g_nErodeDilateNum, 0);
		on_TopBlackHat(g_nTopBlackNum, 0);

		ShowHelpText();

		// 获取按键
		c = waitKey(0);

		// 按下键盘按键Q或者ESC，程序退出
		if ((char)c == 'q' || (char)c == 27)
		{
			break;
		}
		// 按下键盘按键1，使用椭圆(Ellipse)结构元素MORPH_ELLIPSE
		if ((char)c == 49)  // 键盘按键1的ASCII码为49
			g_nElementShape = MORPH_ELLIPSE;
		// 按下键盘按键2，使用矩形(Rectangle)结构元素MORPH_RECT
		else if ((char)c == 50)
			g_nElementShape = MORPH_RECT;
		// 按下键盘按键3，使用十字形(Cross-shaped)结构元素MORPH_CROSS
		else if ((char)c == 51)
			g_nElementShape = MORPH_CROSS;
		// 按下键盘按键space, 在矩形、椭圆、十字形结构元素中循环
		else if ((char)c == ' ')
			g_nElementShape = (g_nElementShape + 1) % 3;
	}
	return 0;
}

static void on_OpenClose(int, void*)
{
	// 偏移量的定义
	int offset = g_nOpenCloseNum - g_nMaxIterationNum;  // 偏移量
	int Absolute_offset = offset > 0 ? offset : -offset;  // 偏移量绝对值
	// 自定义核
	Mat element = getStructuringElement(g_nElementShape,
		Size(Absolute_offset * 2 + 1, Absolute_offset * 2 + 1),
		Point(Absolute_offset, Absolute_offset));
	// 进行操作
	if (offset < 0)
		morphologyEx(g_srcImage, g_dstImage, MORPH_OPEN, element);
	else
		morphologyEx(g_srcImage, g_dstImage, MORPH_CLOSE, element);
	// 显示图像
	imshow("【开运算/闭运算】", g_dstImage);
}

static void on_ErodeDilate(int, void*)
{
	// 偏移量的定义
	int offset = g_nErodeDilateNum - g_nMaxIterationNum;  // 偏移量
	int Absolute_offset = offset > 0 ? offset : -offset;  // 偏移量绝对值
	// 自定义核
	Mat element = getStructuringElement(g_nElementShape,
		Size(Absolute_offset * 2 + 1, Absolute_offset * 2 + 1),
		Point(Absolute_offset, Absolute_offset));
	// 进行操作
	if (offset < 0)
		morphologyEx(g_srcImage, g_dstImage, MORPH_ERODE, element);
	else
		morphologyEx(g_srcImage, g_dstImage, MORPH_DILATE, element);
	// 显示图像
	imshow("【腐蚀/膨胀】", g_dstImage);
}

static void on_TopBlackHat(int, void*)
{
	// 偏移量的定义
	int offset = g_nErodeDilateNum - g_nMaxIterationNum;  // 偏移量
	int Absolute_offset = offset > 0 ? offset : -offset;  // 偏移量绝对值
	// 自定义核
	Mat element = getStructuringElement(g_nElementShape,
		Size(Absolute_offset * 2 + 1, Absolute_offset * 2 + 1),
		Point(Absolute_offset, Absolute_offset));
	// 进行操作
	if (offset < 0)
		morphologyEx(g_srcImage, g_dstImage, MORPH_TOPHAT, element);
	else
		morphologyEx(g_srcImage, g_dstImage, MORPH_BLACKHAT, element);
	// 显示图像
	imshow("【顶帽/黑帽】", g_dstImage);
}

static void ShowHelpText()
{
	cout << "请调整滚动条观察图像效果\n" << endl;
	cout << "按键操作说明：" << endl;
	cout << "\t键盘按键【ESC】或者【Q】- 退出程序" << endl;
	cout << "\t键盘按键【1】- 使用椭圆结构元素" << endl;
	cout << "\t键盘按键【2】- 使用矩形结构元素" << endl;
	cout << "\t键盘按键【3】- 使用十字型结构元素" << endl;
	cout << "\t键盘按键【空格SPACE】- 在矩形、椭圆、十字型结构元素中循环" << endl;
}