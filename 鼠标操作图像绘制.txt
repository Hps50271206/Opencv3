#include <opencv2/opencv.hpp>

using namespace cv;

#define WINDOW_NAME "[程序窗口]"  // 为窗口标题定义的宏

void on_MouseHandle(int event, int x, int y, int flags, void* param);  // 鼠标回调函数
void DrawRectangle(cv::Mat& img, cv::Rect box);  // 绘制矩形

Rect g_rectangle;
bool g_bDrawingBox = false;  // 是否进行绘制
RNG g_rng(12345);  // 随机种子一定，生成随机数一样

int main(int argc, char** argv)
{

	// 1.准备参数
	g_rectangle = Rect(-1, -1, 0, 0);
	Mat srcImage(600, 800, CV_8UC3), tempImage;  
	srcImage = Scalar::all(0);   // 给每个通道赋值0;

	// 2.设置鼠标操作回调函数
	namedWindow(WINDOW_NAME);
	setMouseCallback(WINDOW_NAME, on_MouseHandle, (void*)&srcImage);  // 第三个参数为用户定义的传递到回调函数的参数

	// 3.程序主循环，当进行绘制的标识符为真时，进行绘制
	while (1)
	{
		srcImage.copyTo(tempImage);  // 复制源图到临时变量
		if (g_bDrawingBox) DrawRectangle(tempImage, g_rectangle);  // 当进行绘制的标识符为真时，则进行绘制(显示左键按下移动时的矩形)
		imshow(WINDOW_NAME, tempImage);  // 显示绘制图像
		if (waitKey(10) == 27) break;  // 按下ESC键，程序退出
	}
	return 0;
}

// 鼠标回调函数，根据不同的鼠标事件进行不同的操作
// event是EVENT_+变量之一，x和y是鼠标指针在图像坐标系，flags是EVENT_FLAG的组合,param是用户自定义的传递到SetMouseCallback函数调用的参数
void on_MouseHandle(int event, int x, int y, int flags, void* param)
{
	Mat& image = *(cv::Mat*) param;  // param为srcImage的形参，image为Mat类型的引用(即param的引用)
	switch (event)
	{
		// 鼠标移动消息
		case EVENT_MOUSEMOVE:
		{
			if (g_bDrawingBox)  // 如果是否进行绘制的标识符为真，则记录下长和宽到RECT型变量中
			{
				g_rectangle.width = x - g_rectangle.x;
				g_rectangle.height = y - g_rectangle.y;
			}
		}
		break;

	 // 左键按下消息
		case EVENT_LBUTTONDOWN:
		{
			g_bDrawingBox = true;  // 左键按下才需要绘制
			g_rectangle = Rect(x, y, 0, 0);  // 记录起始点(起始点的width和height都为0)
		}
		break;

	// 左键抬起消息
		case EVENT_LBUTTONUP:
		{
			g_bDrawingBox = false;  // 置标识符为false
			// 对宽和高小于0的处理(即向左移动)
			if (g_rectangle.width < 0)
			{
				g_rectangle.x += g_rectangle.width;
				g_rectangle.width *= -1;
			}
			if (g_rectangle.height < 0)
			{
				g_rectangle.y += g_rectangle.height;
				g_rectangle.height *= -1;
			}
			// 调用函数进行绘制
			DrawRectangle(image, g_rectangle);  // (对左键抬起时的矩形进行绘制)
		}
		break;
	}
}

void DrawRectangle(cv::Mat& img, cv::Rect box)
{
	// Rect类左上角和右下角的坐标可以通过Rect.tl(), Rect.br()获取   RNG的uniform函数可以返回指定范围的随机数
	rectangle(img, box.tl(), box.br(), Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255))); // 随机颜色
}