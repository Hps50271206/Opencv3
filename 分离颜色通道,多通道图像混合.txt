#include <opencv2/core/core.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace std;
using namespace cv;

bool MultiChannelBlending();

int main()
{
	system("color 9F");

	if (MultiChannelBlending())
	{
		cout << endl << "\n运行成功，得出了需要的图像！";
	}

	waitKey(0);
	return 0;
}

bool MultiChannelBlending()
{
	// 1.定义相关变量
	Mat srcImage;
	Mat logoImage;
	vector <Mat> channels;
	Mat imageBlueChannel;

	// 多通道混合-蓝色分量部分
	// 2.读入图片
	logoImage = imread("C:/Users/lenvo/Desktop/background/timg.jpg", 0);
	srcImage = imread("C:/Users/lenvo/Desktop/background/5.jpg");

	if (!logoImage.data)
	{
		cout << "读取logoImage错误!";
		return false;
	}
	if (!srcImage.data)
	{
		cout << "读取srcImage错误!";
		return false;
	}
	
	// 3.把一个三通道的图像转换成三个单通道图像
	split(srcImage, channels);  // 分离色彩通道

	// 4.将原图的蓝色通道引用返回给imageBlueChannel
	imageBlueChannel = channels.at(0);  // 类似的绿色通道为at(1),红色为at(2) , 按BGR解码

	// 5.将原图蓝色通道的(500, 250)坐标右下方的一块区域和logo图进行加权操作，得到的混合结果保存到imageBlueChannel中
	addWeighted(imageBlueChannel(Rect(500, 250, logoImage.cols, logoImage.rows)), 1.0,
		logoImage, 0.5, 0, imageBlueChannel(Rect(500, 250, logoImage.cols, logoImage.rows)));

	// 6.将三个单通道重新合并成一个三通道
	merge(channels, srcImage);

	// 7.显示效果图
	namedWindow("游戏原画 + logo蓝色通道");
	imshow("游戏原画 + logo蓝色通道", srcImage);

	return true;
}