#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <iostream>
#include <iomanip>

using namespace std;
using namespace cv;

#define WINDOW_NAME1 "【原始图】"
#define WINDOW_NAME2 "【图像轮廓】"

Mat g_srcImage, g_grayImage;
int g_nThresh = 100;
int g_nMaxThresh = 255;
RNG g_rng(12345);
Mat g_cannyMat_output;
vector<vector<Point>> g_vContours;
vector<Vec4i> g_vHierarchy;

void on_ThreshChange(int, void*);

int main(int argc, char** argv)
{
	system("color 1E");

	g_srcImage = imread("C:/Users/lenvo/Desktop/background/5.jpg", 100);

	// 把原图像转化成灰度图像
	cvtColor(g_srcImage, g_grayImage, COLOR_BGR2GRAY);
	blur(g_grayImage, g_grayImage, Size(3, 3));

	namedWindow(WINDOW_NAME1, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME1, g_srcImage);

	// 创建滚动条并初始化
	createTrackbar("阈值：", WINDOW_NAME1, &g_nThresh, g_nMaxThresh, on_ThreshChange);
	on_ThreshChange(0, 0);

	waitKey(0);
	return 0;
}

void on_ThreshChange(int, void*)
{
	// 使用canny检测边缘
	Canny(g_grayImage, g_cannyMat_output, g_nThresh, g_nThresh * 2, 3);

	// 找到轮廓
	findContours(g_cannyMat_output, g_vContours, g_vHierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE);

	// 计算矩
	vector<Moments> mu(g_vContours.size());  // 初始化mu的个数
	for (unsigned int i = 0; i < g_vContours.size(); ++i)
	{
		mu[i] = moments(g_vContours[i], false);
	}

	// 计算中心矩
	vector<Point2f> mc(g_vContours.size());
	for (size_t i = 0; i < g_vContours.size(); ++i)
	{
		mc[i] = Point2f(static_cast<float>(mu[i].m10 / mu[i].m00), static_cast<float>(mu[i].m01 / mu[i].m00));  //x = m10/m00, y = m01/m00
	}

	// 绘制轮廓计算面积
	Mat drawing = Mat::zeros(g_cannyMat_output.size(), CV_8UC3);
	printf("\t 输出内容：面积和轮廓长度\n");
	for (unsigned int i = 0; i < g_vContours.size(); i++)
	{
		cout << "通过m00计算出轮廓" << i << "的面积 = " << fixed << setprecision(2) << mu[i].m00 << endl;
		cout << "OpenCV函数计算出的面积 = ";
		cout << fixed << setprecision(2) << contourArea(g_vContours[i]);
		cout << ", 长度 = " << fixed << setprecision(2) << arcLength(g_vContours[i], true);
		Scalar color = Scalar(g_rng.uniform(0, 255), g_rng.uniform(0, 255), g_rng.uniform(0, 255));
		drawContours(drawing, g_vContours, i, color, 2, 8, g_vHierarchy, 0, Point());
		circle(drawing, mc[i], 4, color, -1, 8, 0);
	}
	namedWindow(WINDOW_NAME2, WINDOW_AUTOSIZE);
	imshow(WINDOW_NAME2, drawing);
}