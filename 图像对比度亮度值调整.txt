#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace std;
using namespace cv;

#define WINDOW_NAME "【效果图窗口】"
static void on_ContrastAndBright(int, void*);

int g_nContrastValue;  // 对比度值
int g_nBrightValue;  // 亮度值
Mat g_srcImage, g_dstImage;

int main()
{
	// 1.读取输入图像
	g_srcImage = imread("C:/Users/lenvo/Desktop/background/5.jpg", 199);
	g_dstImage = Mat::zeros(g_srcImage.size(), g_srcImage.type());
	if (!g_srcImage.data)
	{
		printf("读取图片错误！");
		return false;
	}

	// 2.设定对比度和亮度的初值
	g_nContrastValue = 80;
	g_nBrightValue = 80;

	// 3.创建效果图窗口
	namedWindow(WINDOW_NAME);

	// 4.创建轨迹条
	createTrackbar("对比度：", WINDOW_NAME, &g_nContrastValue, 300, on_ContrastAndBright);
	createTrackbar("亮    度：", WINDOW_NAME, &g_nBrightValue, 200, on_ContrastAndBright);

	// 5.进行回调函数初始化
	on_ContrastAndBright(g_nContrastValue, 0);
	on_ContrastAndBright(g_nBrightValue, 0);

	while (char(waitKey(1)) != 'q') {}
	return 0;
}

static void on_ContrastAndBright(int, void*)  // 改变图像对比度和亮度值的回调函数
{
	// 三个for循环，执行运算g_dstImage(i, j) = a * g_srcImage(i, j) + b
	for (int y = 0; y < g_srcImage.rows; ++y)
	{
		for (int x = 0; x < g_srcImage.cols; ++x)
		{
			for (int c = 0; c < 3; ++c)
			{
				// saturate_cast模板函数用于溢出保护，原理如下
				// if (data < 0) data = 0;
				// else if (data > 255) data = 255;
				g_dstImage.at<Vec3b>(y, x)[c] = saturate_cast<uchar>((g_nContrastValue * 0.01) * (g_srcImage.at<Vec3b>(y, x)[c]) + g_nBrightValue);
			}
		}
	}

	// 显示图像
	imshow(WINDOW_NAME, g_dstImage);
}