#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>

using namespace std;
using namespace cv;

void colorReduce1(Mat& inputImage, Mat& outputImage, int div);  // 颜色空间缩减
void colorReduce2(Mat& inputImage, Mat& outputImage, int div);
void colorReduce3(Mat& inputImage, Mat& outputImage, int div);

int main()
{
	// 1.创建原始图并显示
	Mat srcImage = imread("C:/Users/lenvo/Desktop/background/1.jpg");
	imshow("原始图像", srcImage);

	// 2.按原始图的参数规格来创建效果图
	Mat dstImage;
	// create函数分配新的阵列数据
	dstImage.create(srcImage.rows, srcImage.cols, srcImage.type());  // 效果图的大小、类型与原图片相同

	// 3.记录起始时间
	// getTickCount()计时函数返回CPU自某个时间以来走过的时钟周期数
	double time0 = static_cast<double>(getTickCount());  // static_cast强制转换为double类型

	// 4.调用颜色空间缩减函数
	colorReduce3(srcImage, dstImage, 32);

	// 5.计算运行时间并输出
	// getTickFrequency()计时函数返回CPU一秒钟所走的始终周期数
	time0 = ((double)getTickCount() - time0) / getTickFrequency();
	cout << "此方法运行时间为:" << time0 << "秒" << endl;  // 输出运行时间

	// 6. 显示效果图
	imshow("效果图", dstImage);
	waitKey(0);
	return 0;
}

// 用指针访问像素(法一)
void colorReduce1(Mat& inputImage, Mat& outputImage, int div)
{
	outputImage = inputImage.clone();  // 复制实参到临时变量
	int rowNumber = outputImage.rows;  // 行数
	int colNumber = outputImage.cols * outputImage.channels();  // 列数×通道数 = 每一行元素的个数
	
	for (int i = 0; i < rowNumber; i++)
	{
		uchar* data = outputImage.ptr<uchar>(i);  // 获取第i行的首地址
		for (int j = 0; j < colNumber; j++)
		{
			data[j] = data[j] / div * div + div / 2;
		}
	}
}

// 用迭代器操作像素(法二)
void colorReduce2(Mat& inputImage, Mat& outputImage, int div)
{
	// 参数准备
	outputImage = inputImage.clone();  // 复制实参到临时变量
	// 获取迭代器,对RGB三通道的图像，每个点的数据都是一个Vec3b类型
	Mat_<Vec3b>::iterator it = outputImage.begin<Vec3b>();  // 初始位置的迭代器
	Mat_<Vec3b>::iterator itend = outputImage.end<Vec3b>();  // 终止位置的迭代器

	// 存取彩色图像像素
	for (; it != itend; ++it)
	{
		(*it)[0] = (*it)[0] / div * div + div / 2;
		(*it)[1] = (*it)[1] / div * div + div / 2;
		(*it)[2] = (*it)[2] / div * div + div / 2;
	}
}

// 动态地址计算
void colorReduce3(Mat& inputImage, Mat& outputImage, int div)
{
	outputImage = inputImage.clone();
	int rowNumber = outputImage.rows;
	int colNumber = outputImage.cols;

	for (int i = 0; i < rowNumber; i++)
	{
		for (int j = 0; j < colNumber; j++)
		{
			outputImage.at<Vec3b>(i, j)[0] = outputImage.at<Vec3b>(i, j)[0] / div * div + div / 2;  // 取出第i行第j列第0通道的颜色点
			outputImage.at<Vec3b>(i, j)[1] = outputImage.at<Vec3b>(i, j)[1] / div * div + div / 2;
			outputImage.at<Vec3b>(i, j)[2] = outputImage.at<Vec3b>(i, j)[2] / div * div + div / 2;
		}
	}
}