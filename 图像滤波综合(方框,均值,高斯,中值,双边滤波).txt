#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

using namespace std;
using namespace cv;

Mat g_srcImage, g_dstImage1, g_dstImage2, g_dstImage3, g_dstImage4, g_dstImage5;  // 存储图片的Mat类型
int g_nBoxFilterValue = 6;  // 方框滤波参数值
int g_nMeanBlurValue = 6;  // 均值滤波参数值
int g_nGaussianBlurValue = 6;  // 高斯滤波参数值
int g_nMedianBlurValue = 6;  // 中值滤波参数值
int g_nBilateralFilterValue = 6;  // 双边滤波参数值

static void on_BoxFilter(int, void*);  // 方框滤波回调函数
static void on_MeanBlur(int, void*);  // 均值滤波回调函数
static void on_GaussianBlur(int, void*);  // 高斯滤波回调函数
static void on_MedianBlur(int, void*);  // 中值滤波回调函数
static void on_BilateralFilter(int, void*);  // 双边滤波回调函数

int main()
{
	// 改变console字体颜色
	system("color 5E");

	// 载入原图
	g_srcImage = imread("C:/Users/lenvo/Desktop/background/5.jpg", 199);
	if (!g_srcImage.data)
	{
		printf("读取srcImage错误！");
		return false;
	}

	// 复制原图到5个Mat类型中
	g_dstImage1 = g_srcImage.clone();
	g_dstImage2 = g_srcImage.clone();
	g_srcImage.copyTo(g_dstImage3);
	g_dstImage4 = g_srcImage.clone();
	g_dstImage5 = g_srcImage.clone();

	// 显示原图
	namedWindow("【原图窗口】");
	imshow("【原图窗口】", g_srcImage);

	//===========================方框滤波===========================
	// 创建窗口
	namedWindow("【方框滤波】");
	// 创建轨迹条
	createTrackbar("内核值：", "【方框滤波】", &g_nBoxFilterValue, 50, on_BoxFilter);
	on_BoxFilter(g_nBoxFilterValue, 0);

	//===========================均值滤波===========================
	// 创建窗口
	namedWindow("【均值滤波】");
	// 创建轨迹条
	createTrackbar("内核值：", "【均值滤波】", &g_nMeanBlurValue, 50, on_MeanBlur);
	on_MeanBlur(g_nMeanBlurValue, 0);

	//===========================高斯滤波===========================
	// 创建窗口
	namedWindow("【高斯滤波】");
	// 创建轨迹条
	createTrackbar("内核值：", "【高斯滤波】", &g_nGaussianBlurValue, 50, on_GaussianBlur);
	on_GaussianBlur(g_nGaussianBlurValue, 0);

	//===========================中值滤波===========================
	// 创建窗口
	namedWindow("【中值滤波】");
	// 创建轨迹条
	createTrackbar("参数值：", "【中值滤波】", &g_nMedianBlurValue, 50, on_MedianBlur);
	on_MedianBlur(g_nMedianBlurValue, 0);

	//===========================双边滤波===========================
	// 创建窗口
	namedWindow("【双边滤波】");
	// 创建轨迹条
	createTrackbar("参数值：", "【双边滤波】", &g_nBilateralFilterValue, 50, on_BilateralFilter);
	on_BilateralFilter(g_nBilateralFilterValue, 0);
	//=============================================================


	// 输出一些帮助信息
	cout << endl << "\t, 请调整滚动条观察图像效果\n\n"
		<< "\t按下“q”键时，程序退出\n";

	// 按下q键程序退出
	while(char(waitKey(1)) != 'q') {}

	return 0;
}

static void on_BoxFilter(int, void*)
{
	boxFilter(g_srcImage, g_dstImage1, -1, Size(g_nBoxFilterValue + 1, g_nBoxFilterValue + 1));

	// 显示窗口
	imshow("【方框滤波】", g_dstImage1);
}

static void on_MeanBlur(int, void*)
{
	blur(g_srcImage, g_dstImage2, Size(g_nMeanBlurValue + 1, g_nMeanBlurValue + 1), Point(-1, -1));  // 默认值为Point(-1, -1)核中心
	
	// 显示窗口
	imshow("【均值滤波】", g_dstImage2);
}

static void on_GaussianBlur(int, void*)
{
	GaussianBlur(g_srcImage, g_dstImage3, Size(g_nGaussianBlurValue * 2 + 1, g_nGaussianBlurValue * 2 + 1), 0, 0);

	// 显示窗口
	imshow("【高斯滤波】", g_dstImage3);
}

static void on_MedianBlur(int, void*)
{
	medianBlur(g_srcImage, g_dstImage4, g_nMedianBlurValue * 2 + 1);
	imshow("【中值滤波】", g_dstImage4);
}

static void on_BilateralFilter(int, void*)
{
	bilateralFilter(g_srcImage, g_dstImage5, g_nBilateralFilterValue, g_nBilateralFilterValue * 2, g_nBilateralFilterValue / 2);
	imshow("【双边滤波】", g_dstImage5);
}